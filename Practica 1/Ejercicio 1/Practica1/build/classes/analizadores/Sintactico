package analizadores; 
import java_cup.runtime.*;
import java.util.ArrayList;

parser code 
{:
    String cadena = "";
    int contcero = 0;
    int contuno = 0;
    ArrayList<String>  palabras = new ArrayList<String>(); 
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public void write(){
        for (int i = 0; i < palabras.size(); i++) {
            if(i == palabras.size()-1){
                break;
            }
            String aux = palabras.get(i);
            palabras.set(i,palabras.get(i+1));
            palabras.set(i+1, aux);
        }
        System.out.println("NUEVO: "+palabras);
    }


:}

terminal String PUNTO;
terminal String COMMA;
terminal String PYC;
terminal String DOSP;
terminal String PARA;
terminal String PARC;
terminal String LLAVEA;
terminal String LLAVEC;
terminal String CORA;
terminal String CORC;
terminal String MAS;
terminal String MENOS;
terminal String POR;
terminal String DIVIDIDO;
terminal String RAIZ;
terminal String ELEVADO;

terminal String CADENA;

non terminal ini, string;

start with ini;

ini::=string      {: System.out.println("ENTRADA: "+palabras); 
write() :}
;

string ::=
    string COMMA CADENA:cad    {: palabras.add(cad); :}
    | CADENA:cad {: palabras.add(cad);:}
;