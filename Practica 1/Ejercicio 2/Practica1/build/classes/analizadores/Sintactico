package analizadores; 
import java_cup.runtime.*;

parser code 
{:
    String cadena = "";
    int contcero = 0;
    int contuno = 0;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public void write(String out){
        System.out.println(out);
    }
    public void writenumber(int out, int value){
        if(value == 0){
System.out.println("Hay "+String.valueOf(out)+" ceros");

}else if(value == 1){
    System.out.println("Hay "+String.valueOf(out)+" unos");
}

    }
    public void verificar(String num){

        char [] chars = num.toCharArray();
        for(int i = 0; i< num.length(); i++){

            if(chars[i] == '0'){

contcero = contcero + 1;
            }else{

                contuno = contuno + 1;
            }

        }

    }
:}

terminal String NUM;

non terminal S, E;

start with S;

S::=E      {: writenumber(contcero,0);
writenumber(contuno,1);  :}
;

E ::=
    NUM:num E    {: write(num);  :}
    | NUM:num {:  verificar(num); :}
;