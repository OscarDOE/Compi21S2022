2022-02-19 22:10:51:662 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Practica4 (@ parser header {
    import ("Goldang/Node"

	"strings"
    "math"
    )
}) (@ parser members {



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    
}) (RULES (RULE start (returns node.Nodo n) (BLOCK (ALT (= un lista) EOF {
                        mostrar($un.n.A + $un.n.B )
    }))) (RULE lista (returns node.Nodo n) (BLOCK (ALT (= na lista) PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                        x := $na.n.A + " " + $num.text + " "+$num2.text
                                        y := $na.n.B 
                                        $n = node.NewNodo(x, y)
    }) (ALT PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    }))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE COMA (BLOCK (ALT ','))) (RULE NUMBER (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip)))))
2022-02-19 22:10:51:674 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Practica4 (@ parser header {
    import ("Goldang/Node"

	"strings"
    "math"
    )
}) (@ parser members {



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    
}) (RULES (RULE start (returns node.Nodo n) (BLOCK (ALT (= un lista) EOF {
                        mostrar($un.n.A + $un.n.B )
    }))) (RULE lista (returns node.Nodo n) (BLOCK (ALT (= na lista) PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                        x := $na.n.A + " " + $num.text + " "+$num2.text
                                        y := $na.n.B 
                                        $n = node.NewNodo(x, y)
    }) (ALT PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    }))) (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE COMA (BLOCK (ALT ','))) (RULE NUMBER (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip)))))
2022-02-19 22:10:51:694 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Practica4 (@ parser header {
    import ("Goldang/Node"

	"strings"
    "math"
    )
}) (@ parser members {



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    
}) (RULES (RULE start (returns node.Nodo n) (BLOCK (ALT (= un lista) EOF {
                        mostrar($un.n.A + $un.n.B )
    }))) (RULE lista (returns node.Nodo n) (BLOCK (ALT (= na lista) PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                        x := $na.n.A + " " + $num.text + " "+$num2.text
                                        y := $na.n.B 
                                        $n = node.NewNodo(x, y)
    }) (ALT PARA (= num NUMBER) COMA (= num2 NUMBER) PARC {
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    })))))
2022-02-19 22:10:51:694 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR Practica4Lexer (@ parser header {
    import ("Goldang/Node"

	"strings"
    "math"
    )
}) (@ parser members {



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    
}) (RULES (RULE PARA (BLOCK (ALT '('))) (RULE PARC (BLOCK (ALT ')'))) (RULE COMA (BLOCK (ALT ','))) (RULE NUMBER (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip)))))
2022-02-19 22:10:52:146 left-recursion LogManager.java:25 lista returns [node.Nodo n]
    :   ( {} PARA<tokenIndex=70> num=NUMBER<tokenIndex=74> COMA<tokenIndex=76> num2=NUMBER<tokenIndex=80> PARC<tokenIndex=82>        {
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PARA<tokenIndex=52> num=NUMBER<tokenIndex=56> COMA<tokenIndex=58> num2=NUMBER<tokenIndex=62> PARC<tokenIndex=64> {
                                                  x := $na.n.A + " " + $num.text + " "+$num2.text
                                                  y := $na.n.B 
                                                  $n = node.NewNodo(x, y)
              }
        )*
    ;
2022-02-19 22:10:52:154 grammar LogManager.java:25 added: (RULE lista (returns node.Nodo n) (BLOCK (ALT (BLOCK (ALT {} (PARA (ELEMENT_OPTIONS (= tokenIndex 70))) (= num (NUMBER (ELEMENT_OPTIONS (= tokenIndex 74)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 76))) (= num2 (NUMBER (ELEMENT_OPTIONS (= tokenIndex 80)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 82))) {
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PARA (ELEMENT_OPTIONS (= tokenIndex 52))) (= num (NUMBER (ELEMENT_OPTIONS (= tokenIndex 56)))) (COMA (ELEMENT_OPTIONS (= tokenIndex 58))) (= num2 (NUMBER (ELEMENT_OPTIONS (= tokenIndex 62)))) (PARC (ELEMENT_OPTIONS (= tokenIndex 64))) {
                                                  x := $na.n.A + " " + $num.text + " "+$num2.text
                                                  y := $na.n.B 
                                                  $n = node.NewNodo(x, y)
              }))))))
2022-02-19 22:10:52:154 semantics LogManager.java:25 tokens={EOF=-1, PARA=1, PARC=2, COMA=3, NUMBER=4, WHITESPACE=5}
2022-02-19 22:10:52:154 semantics LogManager.java:25 strings={'('=1, ')'=2, ','=3}
2022-02-19 22:10:52:162 LL1 LogManager.java:25 
DECISION 0 in rule lista
2022-02-19 22:10:52:162 LL1 LogManager.java:25 look=[null, <EOF>]
2022-02-19 22:10:52:162 LL1 LogManager.java:25 LL(1)? false
2022-02-19 22:10:52:165 action-translator LogManager.java:25 translate 



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    

2022-02-19 22:10:52:169 action-translator LogManager.java:25 translate 
    import ("Goldang/Node"

	"strings"
    "math"
    )

2022-02-19 22:10:52:245 action-translator LogManager.java:25 translate 
                        mostrar($un.n.A + $un.n.B )
    
2022-02-19 22:10:52:245 action-translator LogManager.java:25 qattr [@-1,35:36='un',<0>,59:33].[@-1,38:38='n',<0>,59:36]
2022-02-19 22:10:52:245 action-translator LogManager.java:25 qattr [@-1,45:46='un',<0>,59:43].[@-1,48:48='n',<0>,59:46]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 translate 
2022-02-19 22:10:52:249 action-translator LogManager.java:25 translate 
                                    x := $num.text + " " + $num2.text
                                    y := "" 
                                    $n = node.NewNodo(x,y)
    
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,44:46='num',<0>,3:42].[@-1,48:51='text',<0>,3:46]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,62:65='num2',<0>,3:60].[@-1,67:70='text',<0>,3:65]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 attr [@-1,156:156='n',<0>,5:37]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-19 22:10:52:249 action-translator LogManager.java:25 translate 
                                                  x := $na.n.A + " " + $num.text + " "+$num2.text
                                                  y := $na.n.B 
                                                  $n = node.NewNodo(x, y)
              
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,58:59='na',<0>,10:56].[@-1,61:61='n',<0>,10:59]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,74:76='num',<0>,10:72].[@-1,78:81='text',<0>,10:76]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,90:93='num2',<0>,10:88].[@-1,95:98='text',<0>,10:93]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 qattr [@-1,157:158='na',<0>,11:56].[@-1,160:160='n',<0>,11:59]
2022-02-19 22:10:52:249 action-translator LogManager.java:25 attr [@-1,217:217='n',<0>,12:51]
2022-02-19 22:10:52:253 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-19 22:10:52:371 action-translator LogManager.java:25 translate 



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    

2022-02-19 22:10:52:371 action-translator LogManager.java:25 translate 
    import ("Goldang/Node"

	"strings"
    "math"
    )

2022-02-19 22:10:52:371 action-translator LogManager.java:25 translate 
    import ("Goldang/Node"

	"strings"
    "math"
    )

2022-02-19 22:10:52:474 action-translator LogManager.java:25 translate 



    func mostrar(out string){


        b := strings.Split(out, " ")


	var s []float64
	for i := 0; i < len(b); i++ {

		w, _ := strconv.ParseFloat(b[i], 64)

		s = append(s, w)
	}
	var answer float64 = 0
	for i := 0; i < len(s)-1; i++ {
		if i+2 >= (len(s) - 1) {
			break
		}

		r1 := math.Pow(s[i+2]-s[i], 2)
		r2 := math.Pow(s[i+3]-s[i+1], 2)
		answer = answer + math.Sqrt(r1+r2)

		i = i + 1
		if i >= (len(s) - 1) {
			break
		}
	}
        fmt.Println(out)
	fmt.Println("la respuesta es: ", answer)

    }
    

2022-02-19 22:10:52:474 action-translator LogManager.java:25 translate 
    import ("Goldang/Node"

	"strings"
    "math"
    )

2022-02-19 22:10:52:474 action-translator LogManager.java:25 translate 
    import ("Goldang/Node"

	"strings"
    "math"
    )

